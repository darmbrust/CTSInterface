<?xml version="1.0" encoding="UTF-8"?>
<project name="HL7 CTS API" default="regenAPI" basedir=".">
	<!-- For this build script to work properly, you must have Python (www.python.org) installed -->
	
	<!-- CUSTOMIZE - this is where you set the names of your implementation classes for each of the interfaces -->
	<!-- These classes are used to gather variable names for the generation of the wsdl files - they are optional -->
	<property name="CodeMappingImpl" value="edu.mayo.informatics.cts.CTSVAPI.sql.refImpl.CodeMappingOperationsImpl"/>
	<property name="MessageBrowserImpl" value="edu.mayo.informatics.cts.CTSMAPI.refImpl.BrowserOperationsImpl"/>
	<property name="MessageRuntimeImpl" value="edu.mayo.informatics.cts.CTSMAPI.refImpl.RuntimeOperationsImpl"/>
	<property name="VocabBrowserImpl" value="edu.mayo.informatics.cts.CTSVAPI.sql.refImpl.BrowserOperationsImpl"/>
	<property name="VocabRuntimeImpl" value="edu.mayo.informatics.cts.CTSVAPI.sql.refImpl.RuntimeOperationsImpl"/>
	<property name="HWMessageRuntimeImpl" value="com.apelon.headwater.HWAPI.refImpl.HWRuntimeOperationsImpl"/>

	
	<!-- IDL compiler related properties -->
	<property name="idl.compiler" value="com.sun.tools.corba.se.idl.toJavaPortable.Compile" />
	<path id="java.tools" path="${java.home}/../lib/tools.jar" />
	<!--java.home points to the jre folder-->
	<patternset id="corbaFiles">
		<include name="*Holder.java" />
		<include name="*Helper.java" />
		<include name="_*Stub.java" />
		<include name="*POA.java" />
		<include name="*POATie.java" />
	</patternset>

	<!-- WSDL java compilers -->
	<property name="wsdl.java2wsdl" value="org.apache.axis.wsdl.Java2WSDL" />
	<property name="wsdl.wsdl2java" value="org.apache.axis.wsdl.WSDL2Java" />

	<!-- Saxon transform engine - Saxon is required for HL7 documents -->
	<property name="saxon.engine" value="com.icl.saxon.StyleSheet" />
	<property name="saxon.jar" value="saxon.jar" />

	<!-- Build directory layout -->
	<property name="build.dir" value="build" />
	<property name="deploy.dir" value="deploy" />
	<property name="idl.src.dir" value="idl" />
	<property name="idl.java.target.dir" value="${build.dir}/idljava" />
	<property name="idl.compile.target.dir" value="${idl.java.target.dir}/classes" />
	<property name="idlJava.jar" value="${deploy.dir}/idl_CTSInterface.jar" />
	<property name="wsdlJava.jar" value="${deploy.dir}/wsdl_CTSInterface.jar" />
	<property name="wsdl.target.dir" value="${build.dir}/wsdl" />
	<property name="wsdl.java.target.dir" value="${build.dir}/wsdljava/src" />
	<property name="wsdl.compile.target.dir" value="${wsdl.java.target.dir}/../classes" />
	<property name="wsdd.target.dir" value="${build.dir}/wsdd" />
	<property name="externalLib.dir" value="extLib" />
	<property name="impl.jar" value="${externalLib.dir}/implementation/ctsImpl.jar" />
	<property name="javadocs.dir" value="${build.dir}/javadocs" />
	<property name="spec.dir" value="spec" />
	<property name="spec.idl.dir" value="${spec.dir}/idl" />
	<property name="spec.code.dir" value="${spec.dir}/code" />
	<property name="spec.wsdl.dir" value="${spec.dir}/wsdl" />

	<!-- package to urn maps for namespaces  -->
	<property name="v3dt.package" value="org.hl7.cts.types" />
	<property name="v3dt.urn" value="urn://cts.hl7.org/types" />
	<property name="CTSMAPI.package" value="org.hl7.CTSMAPI" />
	<property name="CTSMAPI.urn" value="urn://hl7.org/CTSMAPI" />
	<property name="CTSVAPI.package" value="org.hl7.CTSVAPI" />
	<property name="CTSVAPI.urn" value="urn://hl7.org/CTSVAPI" />
	<property name="HWAPI.package" value="com.apelon.headwater.HWAPI"/>
	<property name="HWAPI.urn" value="urn://headwater.apelon.com/HWAPI"/>

	<!--Sets up all of the classpaths, etc-->
	<target name="init">
		<path id="allJars">
			<fileset dir="${externalLib.dir}" id="packageJars">
				<include name="*.jar" />
				<exclude name="saxon.jar" />
			</fileset>
			<fileset dir="${externalLib.dir}" id="xml.parser">
				<include name="xerces.jar" />
				<include name="xml-apis.jar" />
			</fileset>
			<fileset dir="${externalLib.dir}/axis/" id="axisJars">
				<include name="*.jar" />
			</fileset>
		</path>

		<!-- Make sure the python scripts have the "right" line returns (since python dies if it has the wrong ending)-->
		<condition property="lineEndingType" value="crlf">
			<and>
				<os family="windows" />
			</and>
		</condition>

		<condition property="lineEndingType" value="lf">
			<and>
				<os family="unix" />
			</and>
		</condition>
		<fixcrlf srcdir="tools/" eol="${lineEndingType}" includes="**/*.py" />
	</target>

	<!-- Reset the project back to an unbuilt state -->
	<target name="cleanAll" description="Reset project back to unbuilt state">
		<delete dir="${build.dir}" />
		<delete dir="${spec.idl.dir}" />
		<delete dir="${spec.wsdl.dir}" />
		<delete file="${spec.dir}/cts.htm" />
		<mkdir dir="${deploy.dir}"/> <!--create it if it doesn't exist-->
		<delete>
			<fileset dir="${deploy.dir}">
				<include name="*.jar"/>
				<include name="*.zip"/>
			</fileset>
		</delete>
	</target>

	<!-- Remove all intermediate build targets -->
	<target name="clean" description="Remove intermediate build targets">
		<delete dir="${idl.java.target.dir}" />
		<delete dir="${build.dir}/wsdljava" />
		<delete dir="${spec.code.dir}" />
	</target>

	<!-- Compile an idl file into java and tweak the output
		$packageDir	   - the package pathname for the idl target
	     	$compileTarget	   - the target idl file
	-->
	<target name="compileIdlFileToJava">
		<echo>Compiling idl file: ${compileTarget} into: ${packageDir}/${compileTarget}</echo>
		<mkdir dir="${idl.java.target.dir}/${packageDir}/${compileTarget}" />

		<java fork="true" classname="${idl.compiler}">
			<classpath refid="java.tools" />
			<arg line="-fallTIE" />
			<arg line="-td ${idl.java.target.dir}" />
			<arg line="-pkgPrefix types org.hl7.cts" />
			<arg line="-pkgPrefix CTSMAPI org.hl7" />
			<arg line="-pkgPrefix CTSVAPI org.hl7" />
			<arg line="-pkgPrefix HWAPI com.apelon.headwater" />
			<arg line="-i ${idl.src.dir}" />
			<arg line="${idl.src.dir}/${compileTarget}.idl" />
		</java>

		<!-- Delete all files that have corresponding *Operations entries -->
		<!-- What we are really doing is a mapper delete - not supported by Ant, unfortunately -->

		<exec executable="python" dir=".">
			<arg line="tools/del_operations.py" />
			<arg line="${idl.java.target.dir}/${packageDir}/${compileTarget}" />
		</exec>

		<!-- Remove all of the other CORBA specific files -->
		<delete>
			<fileset dir="${idl.java.target.dir}/${packageDir}/${compileTarget}">
				<patternset refid="corbaFiles" />
			</fileset>
		</delete>

		<!-- Clean the CORBA out of the exceptions -->
		<exec executable="python" dir=".">
			<arg line="tools/fix_exceptions.py" />
			<arg line="${idl.java.target.dir}/${packageDir}/${compileTarget}" />
			<arg line="${idl.java.target.dir}/${packageDir}/${compileTarget}" />
		</exec>

		<!-- Make the comments mo' nice -->
		<exec executable="python" dir=".">
			<arg line="tools/fix_comments.py" />
			<arg line="${idl.java.target.dir}/${packageDir}/${compileTarget}" />
		</exec>

	</target>

	<!-- Compile the java generated by the idl
	     	packageDir	   - the package pathname for the target
	     	compileTarget	   - the target idl file
	-->
	<target name="compileIdlJavaOutput" depends="compileIdlFileToJava">
		<echo>Compiling ${idl.java.target.dir}/${packageDir}/${compileTarget}</echo>
		<mkdir dir="${idl.compile.target.dir}" />

		<javac debug="true" classpath="${idl.compile.target.dir}" srcdir="${idl.java.target.dir}/${packageDir}/${compileTarget}" destdir="${idl.compile.target.dir}" />
	</target>

	<!-- Convert the specified java class into wsdl
	     	wsdlTarget	- target name (w/o wsdl suffix)
	     	wsdlClass	- java class to compile into wsdl
	     	wsdlUrn		- urn of wsdl (note: has to match -pkgPrefix & - p args...)
	     	wsdlImplClass	- name of the implementation class (if any)
	-->
	<target name="genWsdlTarget">
		<echo>Generating ${wsdl.target.dir}/${wsdlTarget}.wsdl from ${wsdlClass}</echo>
		<mkdir dir="${wsdl.target.dir}" />

		<!--If the implementation jar exists, add a parameter to the java2wsdl program to tell
		it to load the parameter names from there-->
		<condition property="implExists" value="-i ${wsdlImplClass}">
			<available file="${impl.jar}" />
		</condition>
		<condition property="implExists" value="">
			<not>
				<isset property="implExists" />
			</not>
		</condition>

		<!-- We have to fork here because of log4j conflicts -->
		<java classname="${wsdl.java2wsdl}" fork="true">
			<classpath>
				<pathelement location="${idl.compile.target.dir}" />
				<fileset refid="xml.parser" />
				<pathelement location="${impl.jar}" />
				<pathelement location="${wsdl.compile.target.dir}" />
				<fileset refid="axisJars" />
			</classpath>
			<arg line="-o ${wsdl.target.dir}/${wsdlTarget}.wsdl" />
			<arg line="-n ${wsdlUrn}" />
			<arg line="${implExists}" />
			<arg line="-lhttp://localhost:8080/axis/services/${wsdlTarget}Service" />
			<arg line="-p${v3dt.package}=${v3dt.urn}" />
			<arg line="-p${CTSMAPI.package}=${CTSMAPI.urn}" />
			<arg line="-p${CTSVAPI.package}=${CTSVAPI.urn}" />
			<arg line="-p${HWAPI.package}=${HWAPI.urn}" />
			<arg line="-y WRAPPED" />
			<arg line="${wsdlClass}" />
		</java>
	</target>

	<!-- Convert a wsdl file back into java
	     wsdlSource	- source wsdl file to convert (w/o WSDL suffix)
	     packageDir	- package name for target
	     wsdlImplClass - implementation class name file
	-->
	<target name="genWddl">
		<echo>Generating java from ${wsdl.target.dir}/${wsdlSource}.wsdl</echo>
		<mkdir dir="${wsdl.java.target.dir}" />
		<mkdir dir="${wsdd.target.dir}" />
		<java classname="${wsdl.wsdl2java}" fork="true">
			<classpath>
				<fileset refid="axisJars" />
				<fileset refid="xml.parser" />
			</classpath>
			<arg line="-o ${wsdl.java.target.dir}" />
			<arg line="-d Application" />
			<arg line="-N${v3dt.urn}=${v3dt.package}" />
			<arg line="-N${CTSMAPI.urn}=${CTSMAPI.package}" />
			<arg line="-N${CTSVAPI.urn}=${CTSVAPI.package}" />
			<arg line="-N${HWAPI.urn}=${HWAPI.package}" />
			<arg line="-s" />
			<arg line="file:${wsdl.target.dir}/${wsdlSource}.wsdl" />
		</java>

		<move file="${wsdl.java.target.dir}/${packageDir}/deploy.wsdd" tofile="${wsdd.target.dir}/${wsdlSource}deploy.wsdd" />
		<replaceregexp file="${wsdd.target.dir}/${wsdlSource}deploy.wsdd" match='(parameter name="className".*value=").*?(".*)' replace="\1${wsdlImplClass}\2" byline="true" />

		<move file="${wsdl.java.target.dir}/${packageDir}/undeploy.wsdd" toFile="${wsdd.target.dir}/${wsdlSource}undeploy.wsdd" />
	</target>

	<!-- Convert the idl into java and compile it -->
	<target name="idlToJava">
		<mkdir dir="${deploy.dir}"/>
		<echo>Creating ${idlJava.jar}</echo>
		<condition property="is-jdk14">
			<or>
				<equals arg1="${ant.java.version}" arg2="1.4" />
				<equals arg1="${ant.java.version}" arg2="1.5" />
				<equals arg1="${ant.java.version}" arg2="1.6" />
			</or>
		</condition>

		<fail message="The IDL must be compiled with a 1.4 or greater version of java." unless="is-jdk14" />

		<echo>Checking for Python.  If this fails, it means python could not be found on your PATH.</echo>
		<exec executable="python" dir=".">
			<arg line="-V" />
		</exec>

		<antcall target="compileIdlJavaOutput">
			<param name="packageDir" value="org/hl7/cts" />
			<param name="compileTarget" value="types" />
		</antcall>
		<antcall target="compileIdlJavaOutput">
			<param name="packageDir" value="org/hl7" />
			<param name="compileTarget" value="CTSVAPI" />
		</antcall>
		<antcall target="compileIdlJavaOutput">
			<param name="packageDir" value="org/hl7" />
			<param name="compileTarget" value="CTSMAPI" />
		</antcall>
		<antcall target="compileIdlJavaOutput">
			<param name="packageDir" value="com/apelon/headwater" />
			<param name="compileTarget" value="HWAPI" />
		</antcall>

		<jar jarfile="${idlJava.jar}" basedir="${idl.compile.target.dir}" includes="**/*.class" />
	</target>

	<!-- Create wsdl from the idl java -->
	<target name="genWsdl" depends="init">
		<antcall inheritrefs="true" target="genWsdlTarget">
			<reference refid="axisJars" />
			<reference refid="xml.parser" />
			<param name="wsdlTarget" value="VocabRuntime" />
			<param name="wsdlClass" value="org.hl7.CTSVAPI.RuntimeOperations" />
			<param name="wsdlUrn" value="${CTSVAPI.urn}" />
			<param name="wsdlImplClass" value="${VocabRuntimeImpl}" />
		</antcall>
		<antcall target="genWsdlTarget">
			<reference refid="axisJars" />
			<reference refid="xml.parser" />
			<param name="wsdlTarget" value="VocabBrowser" />
			<param name="wsdlClass" value="org.hl7.CTSVAPI.BrowserOperations" />
			<param name="wsdlUrn" value="${CTSVAPI.urn}" />
			<param name="wsdlImplClass" value="${VocabBrowserImpl}" />
		</antcall>
		<antcall target="genWsdlTarget">
			<reference refid="axisJars" />
			<reference refid="xml.parser" />
			<param name="wsdlTarget" value="CodeMapping" />
			<param name="wsdlClass" value="org.hl7.CTSVAPI.CodeMappingOperations" />
			<param name="wsdlUrn" value="${CTSVAPI.urn}" />
			<param name="wsdlImplClass" value="${CodeMappingImpl}" />
		</antcall>
		<antcall target="genWsdlTarget">
			<reference refid="axisJars" />
			<reference refid="xml.parser" />
			<param name="wsdlTarget" value="MessageRuntime" />
			<param name="wsdlClass" value="org.hl7.CTSMAPI.RuntimeOperations" />
			<param name="wsdlUrn" value="${CTSMAPI.urn}" />
			<param name="wsdlImplClass" value="${MessageRuntimeImpl}" />
		</antcall>
		<antcall target="genWsdlTarget">
			<reference refid="axisJars" />
			<reference refid="xml.parser" />
			<param name="wsdlTarget" value="MessageBrowser" />
			<param name="wsdlClass" value="org.hl7.CTSMAPI.BrowserOperations" />
			<param name="wsdlUrn" value="${CTSMAPI.urn}" />
			<param name="wsdlImplClass" value="${MessageBrowserImpl}" />
		</antcall>
		<antcall target="genWsdlTarget">
			<reference refid="axisJars" />
			<reference refid="xml.parser" />
			<param name="wsdlTarget" value="HWMessageRuntime" />
			<param name="wsdlClass" value="com.apelon.headwater.HWAPI.HWRuntimeOperations" />
			<param name="wsdlUrn" value="${HWAPI.urn}" />
			<param name="wsdlImplClass" value="${HWMessageRuntimeImpl}" />
		</antcall>
		<!-- Package up the wsdl files for distribution -->
		<zip destfile="${deploy.dir}/wsdl.zip" basedir="${wsdl.target.dir}" includes="*.wsdl" />
	</target>

	<!-- Convert wsdl back into a java target -->
	<target name="wsdlToJava" depends="init">
		<echo>Creating ${wsdlJava.jar}"</echo>
		<antcall target="genWddl">
			<reference refid="axisJars" />
			<reference refid="xml.parser" />
			<param name="wsdlSource" value="VocabRuntime" />
			<param name="packageDir" value="org/hl7/CTSVAPI" />
			<param name="wsdlImplClass" value="${VocabRuntimeImpl}" />
		</antcall>
		<antcall target="genWddl">
			<reference refid="axisJars" />
			<reference refid="xml.parser" />
			<param name="wsdlSource" value="VocabBrowser" />
			<param name="packageDir" value="org/hl7/CTSVAPI" />
			<param name="wsdlImplClass" value="${VocabBrowserImpl}" />
		</antcall>
		<antcall target="genWddl">
			<reference refid="axisJars" />
			<reference refid="xml.parser" />
			<param name="wsdlSource" value="CodeMapping" />
			<param name="packageDir" value="org/hl7/CTSVAPI" />
			<param name="wsdlImplClass" value="${CodeMappingImpl}" />
		</antcall>
		<antcall target="genWddl">
			<reference refid="axisJars" />
			<reference refid="xml.parser" />
			<param name="wsdlSource" value="MessageRuntime" />
			<param name="packageDir" value="org/hl7/CTSMAPI" />
			<param name="wsdlImplClass" value="${MessageRuntimeImpl}" />
		</antcall>
		<antcall target="genWddl">
			<reference refid="axisJars" />
			<reference refid="xml.parser" />
			<param name="wsdlSource" value="MessageBrowser" />
			<param name="packageDir" value="org/hl7/CTSMAPI" />
			<param name="wsdlImplClass" value="${MessageBrowserImpl}" />
		</antcall>
		<antcall target="genWddl">
			<reference refid="axisJars" />
			<reference refid="xml.parser" />
			<param name="wsdlSource" value="HWMessageRuntime" />
			<param name="packageDir" value="com/apelon/headwater/HWAPI" />
			<param name="wsdlImplClass" value="${HWMessageRuntimeImpl}" />
		</antcall>
		<!-- Package up the deploy / undeploy wsdd files for distribution -->
		<zip destfile="${deploy.dir}/deploy_undeploy_wsdd.zip" basedir="${wsdd.target.dir}" />
	</target>

	<!--
	Compile the final wsdl output
	-->
	<target name="compileWsdlJava" depends="wsdlToJava">
		<mkdir dir="${wsdl.compile.target.dir}" />
		<javac source="1.4" debug="true" srcdir="${wsdl.java.target.dir}" destdir="${wsdl.compile.target.dir}">
			<classpath>
				<fileset refid="axisJars" />
				<fileset refid="xml.parser" />
				<pathelement location="${wsdl.compile.target.dir}" />
			</classpath>
		</javac>
		<jar jarfile="${wsdlJava.jar}" basedir="${wsdl.compile.target.dir}" includes="**/*.class" />
	</target>

	<!-- Compile everything -->
	<target name="regenAPI" description="Compile the CTS API" depends="init,cleanAll,idlToJava,genWsdl,compileWsdlJava,docs,spec,clean,zip" />

	<target name="zip">
		<zip destfile="${deploy.dir}/CTSInterface.zip">
			<fileset dir=".">
				<exclude name="build/"/>
				<exclude name="${deploy.dir}/"/>
				<exclude name="${spec.idl.dir}/"/>
				<exclude name="${spec.wsdl.dir}/"/>
				<exclude name="${spec.dir}/cts.htm"/>
			</fileset>
		</zip>
	</target>
	
	<target name="docs" depends="compileWsdlJava" description="Generate the javadocs">
		<mkdir dir="${javadocs.dir}" />
		<!--Create the javadocs-->
		<javadoc source="1.4" destdir="${javadocs.dir}" windowtitle="HL7 CTS Specification" additionalparam="-breakiterator">
			<package name="*" />
			<classpath>
				<pathelement location="${wsdlJava.jar}" />
			</classpath>
			<classpath refid="allJars" />
			<sourcepath location="${idl.java.target.dir}" />
		</javadoc>
		<!-- Package up the docs for distribution -->
		<zip destfile="${deploy.dir}/javadoc.zip" basedir="${javadocs.dir}" />
	</target>

	<target name="spec" depends="init" description="Generate HL7 CTS Specification">
		<mkdir dir="${spec.idl.dir}" />
		<mkdir dir="${spec.code.dir}" />
		<mkdir dir="${spec.wsdl.dir}" />
		<!--Copy an image of the idl and code for reference from the spec -->
		<copy toDir="${spec.idl.dir}/" verbose="false">
			<fileset dir="${idl.src.dir}/">
				<include name="CTSMAPI.idl" />
				<include name="CTSVAPI.idl" />
				<include name="types.idl" />
			</fileset>
		</copy>
		<!--Copy an image of the wsdl for reference from the spec -->
		<copy toDir="${spec.wsdl.dir}/" verbose="false">
			<fileset dir="${wsdl.target.dir}/">
				<include name="*.wsdl" />
			</fileset>
		</copy>
		<!--Strip the comments out of the idl and xml-ize it -->
		<exec executable="python" dir=".">
			<arg line="tools/stripModule.py" />
			<arg line="${idl.src.dir}/CTSMAPI.idl" />
			<arg line="${spec.code.dir}/CTSMAPI.xml" />
		</exec>
		<exec executable="python" dir=".">
			<arg line="tools/stripModule.py" />
			<arg line="${idl.src.dir}/CTSVAPI.idl" />
			<arg line="${spec.code.dir}/CTSVAPI.xml" />
		</exec>
		<!--Transform the xml into html -->
		<java dir="${spec.dir}" fork="true" classname="${saxon.engine}">
			<classpath location="${externalLib.dir}/${saxon.jar}" />
			<arg line="-o cts.htm" />
			<arg line="cts.xml" />
			<arg line="V3mLayoutHTML.xsl" />
		</java>
		<!-- Package up the result for distribution -->
		<zip destfile="${deploy.dir}/ctsspec.zip" basedir="${spec.dir}" excludes="code/, ctsspec.zip" />
	</target>
</project>
